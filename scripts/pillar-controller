#!/usr/bin/env ruby

require 'pillar'

Pillar.configure do |config|
end

WORKERS_KEY = '/workers'
service_threads = []
child_threads   = []

at_exit {
  print 'Cleaning up....'
  child_threads.each   {|t| t.kill}
  service_threads.each {|t| t.kill}
  puts 'done'
  exit!
}


def etcd
 Etcd.client( host: Pillar.configuration.etcd_hosts, port: 4001 )
end

def spawn_worker(worker)
  puts "Worker #{worker.inspect} type: #{worker.class}"
  begin
    worker.spawn
  rescue => e
    puts e.inspect
    puts caller
  end
  puts "Spawned worker"
end

def worker_by_path(worker_path)
  puts "Looking for worker #{worker_path}"
  get_client  = etcd
  worker_json = get_client.get(worker_path).value
  worker_json ? Pillar::Serialization.from_json(worker_json) : nil
end
def worker_by_id(worker_id)
  key = "#{WORKERS_KEY}/#{worker_id}"
  puts "Searching for key #{key}"
  worker_by_path(key)
end

def dispatch_worker(event)
  # Spawn new thread to handle new watch request
  Thread.new {
    case event.action
    when 'set'
      puts "Got new worker #{event.key}"
      worker = worker_by_path(event.key)
      if worker
        spawn_worker(worker)
        puts "Spawned worker #{event.key}"
      else
        puts "Not Spawning worker for #{event.key}"
      end
    else
      put "Dispatch failed for: #{event.action} #{event.inspect}"
    end

    puts "Processed Worker Event #{event.key}"
  }.join 
end



service_threads << Thread.new {
  listener = Listen.to(Pillar.configuration.pid_dir, only: /pillar\.\w+\.pid$/) do |modified, added, removed|
    puts "modified absolute path: #{modified}" unless modified.empty?
    puts "added absolute path: #{added}" unless added.empty?
    
    unless removed.empty?
      puts "removed absolute path: #{removed}" 
      path = removed.first
      worker_id = path.match(/pillar\.(\w+)\.pid$/)[1]
      if worker_id
        puts "Found WorkerID #{worker_id}"
        worker = worker_by_id(worker_id)
        if worker
          puts "Got worker #{worker_id} info"
          spawn_worker(worker) 
          puts "Spawning worker #{worker_id}"
        else
          puts "Dropping remove event for #{worker_id}"
        end
      end
    end

  end
  listener.start # not blocking
  puts "Watching pid path #{Pillar.configuration.pid_dir}"
  sleep
}



service_threads << Thread.new {
  watch_client = etcd

  puts "Watching Etcd Key #{Pillar.configuration.etcd_hosts}:4001/v2/keys/workers"
  loop do 
    etcd_event = watch_client.watch(WORKERS_KEY, recursive:true)

    puts "Found Worker Event #{etcd_event.key}"

    dispatch_worker(etcd_event)   
  end
}


Pillar::SinatraController.run!

# service_threads << Thread.new {SinatraController.run!}

# sleep

# child_threads.each   {|t| t.join}
# service_threads.each {|t| t.join}



